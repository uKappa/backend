/// <reference types="@qualweb/types" />
import { CSSProperties, CSSProperty, MediaProperty, PseudoSelectorProperty } from '@qualweb/qw-element';
declare class QWElement {
    private readonly element;
    private readonly elementsCSSRules?;
    private selector;
    constructor(element: Element, elementsCSSRules?: Map<Element, CSSProperties>);
    private addCSSRulesPropertyToElement;
    hasCSSRules(): boolean;
    getCSSRules(): CSSProperties | undefined;
    hasCSSProperty(property: string, pseudoStyle?: string, media?: string): boolean;
    getCSSProperty(property: string, pseudoStyle?: string, media?: string): CSSProperty | undefined;
    getCSSMediaRules(): MediaProperty | undefined;
    getCSSPseudoSelectorRules(pseudoSelector: string): PseudoSelectorProperty | undefined;
    elementHasAttribute(attribute: string): boolean;
    elementHasAttributes(): boolean;
    elementHasChild(childName: string): boolean;
    elementHasChildren(): boolean;
    elementHasParent(parent: string): boolean;
    hasTextNode(): boolean;
    getElementAttribute(attribute: string): string | null;
    getElementAttributes(): {
        [attr: string]: string;
    };
    getElementAttributesName(): Array<string>;
    getElementChildren(): Array<QWElement>;
    getElementChildTextContent(childName: string): string | undefined;
    getElementHtmlCode(withText: boolean, fullElement: boolean): string;
    getElement(selector: string): QWElement | null;
    private convertElementToQWElement;
    private convertElementsToQWElement;
    getElements(selector: string): Array<QWElement>;
    getElementNextSibling(): QWElement | null;
    getAllPreviousSiblings(): Array<QWElement | string>;
    getAllNextSiblings(): Array<QWElement | string>;
    getPreviousSibling(): QWElement | string | null;
    getNextSibling(): QWElement | string | null;
    getElementParent(): QWElement | null;
    getParentAllContexts(): QWElement | null;
    getElementPreviousSibling(): QWElement | null;
    getElementProperty(property: string): string;
    getElementSelector(): string;
    private getSelfLocationInParent;
    getElementStyleProperty(property: string, pseudoStyle: string | null): string;
    getElementTagName(): string;
    getElementText(): string;
    getElementOwnText(): string;
    getElementType(): string;
    getNumberOfSiblingsWithTheSameTag(): number;
    setElementAttribute(attribute: string, value: string): void;
    concatANames(aNames: Array<string>): string;
    isOffScreen(): boolean;
    isElementHTMLElement(): boolean;
    getContentFrame(): Document | null;
    elementHasTextNode(): boolean;
    private noParentScrolled;
    focusElement(): void;
    dispatchEvent(event: Event): void;
    click(): void;
    getBoundingBox(): DOMRect;
    getShadowElement(selector: string): QWElement | null;
    getShadowElements(selector: string): Array<QWElement>;
    getSlotElements(): Array<QWElement>;
    getSlotNodes(): Node[];
    isShadowRoot(): boolean;
    elementHasShadowDescendant(): boolean;
}
export { QWElement };
//# sourceMappingURL=index.d.ts.map